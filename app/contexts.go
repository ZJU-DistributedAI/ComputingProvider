// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// unnamed API: Application Contexts
//
// Command:
// $ goagen
// --design=ComputingProvider/design
// --out=$(GOPATH)\src\ComputingProvider
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AddComputingProviderContext provides the ComputingProvider add action context.
type AddComputingProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey string
	Hash   string
}

// NewAddComputingProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ComputingProvider controller add action.
func NewAddComputingProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddComputingProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddComputingProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramHash := req.Params["hash"]
	if len(paramHash) > 0 {
		rawHash := paramHash[0]
		rctx.Hash = rawHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddComputingProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddComputingProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddComputingProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *AddComputingProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// AgreeComputingProviderContext provides the ComputingProvider agree action context.
type AgreeComputingProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey        string
	ComputingHash string
	ContractHash  string
	PublicKey     string
}

// NewAgreeComputingProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ComputingProvider controller agree action.
func NewAgreeComputingProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*AgreeComputingProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AgreeComputingProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramComputingHash := req.Params["computing_hash"]
	if len(paramComputingHash) > 0 {
		rawComputingHash := paramComputingHash[0]
		rctx.ComputingHash = rawComputingHash
	}
	paramContractHash := req.Params["contract_hash"]
	if len(paramContractHash) > 0 {
		rawContractHash := paramContractHash[0]
		rctx.ContractHash = rawContractHash
	}
	paramPublicKey := req.Params["public_key"]
	if len(paramPublicKey) > 0 {
		rawPublicKey := paramPublicKey[0]
		rctx.PublicKey = rawPublicKey
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AgreeComputingProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AgreeComputingProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AgreeComputingProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *AgreeComputingProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// DelComputingProviderContext provides the ComputingProvider del action context.
type DelComputingProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey string
	Hash   string
}

// NewDelComputingProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ComputingProvider controller del action.
func NewDelComputingProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*DelComputingProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DelComputingProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramHash := req.Params["hash"]
	if len(paramHash) > 0 {
		rawHash := paramHash[0]
		rctx.Hash = rawHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DelComputingProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DelComputingProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DelComputingProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *DelComputingProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// UploadResComputingProviderContext provides the ComputingProvider uploadRes action context.
type UploadResComputingProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey    string
	AesHash   string
	RequestID int
	ResHash   string
}

// NewUploadResComputingProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ComputingProvider controller uploadRes action.
func NewUploadResComputingProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadResComputingProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadResComputingProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramAesHash := req.Params["aes_hash"]
	if len(paramAesHash) > 0 {
		rawAesHash := paramAesHash[0]
		rctx.AesHash = rawAesHash
	}
	paramRequestID := req.Params["request_id"]
	if len(paramRequestID) > 0 {
		rawRequestID := paramRequestID[0]
		if requestID, err2 := strconv.Atoi(rawRequestID); err2 == nil {
			rctx.RequestID = requestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("request_id", rawRequestID, "integer"))
		}
	}
	paramResHash := req.Params["res_hash"]
	if len(paramResHash) > 0 {
		rawResHash := paramResHash[0]
		rctx.ResHash = rawResHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UploadResComputingProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UploadResComputingProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UploadResComputingProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *UploadResComputingProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}
