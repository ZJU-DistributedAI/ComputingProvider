// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// unnamed API: ComputingProvider Resource Client
//
// Command:
// $ goagen
// --design=ComputingProvider/design
// --out=$(GOPATH)\src\ComputingProvider
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddComputingProviderPath computes a request path to the add action of ComputingProvider.
func AddComputingProviderPath(hash string, privateKey string) string {
	param0 := hash
	param1 := privateKey

	return fmt.Sprintf("/computing/add/%s/%s", param0, param1)
}

// add computing resource
func (c *Client) AddComputingProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAddComputingProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddComputingProviderRequest create the request corresponding to the add action endpoint of the ComputingProvider resource.
func (c *Client) NewAddComputingProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// AgreeComputingProviderPath computes a request path to the agree action of ComputingProvider.
func AgreeComputingProviderPath(hash string, eTHKey string, requestID int) string {
	param0 := hash
	param1 := eTHKey
	param2 := strconv.Itoa(requestID)

	return fmt.Sprintf("/computing/agree/%s/%s/%s", param0, param1, param2)
}

// agree computing request for request[ID]
func (c *Client) AgreeComputingProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAgreeComputingProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAgreeComputingProviderRequest create the request corresponding to the agree action endpoint of the ComputingProvider resource.
func (c *Client) NewAgreeComputingProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DelComputingProviderPath computes a request path to the del action of ComputingProvider.
func DelComputingProviderPath(hash string, privateKey string) string {
	param0 := hash
	param1 := privateKey

	return fmt.Sprintf("/computing/del/%s/%s", param0, param1)
}

// delete computing resource
func (c *Client) DelComputingProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDelComputingProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDelComputingProviderRequest create the request corresponding to the del action endpoint of the ComputingProvider resource.
func (c *Client) NewDelComputingProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UploadResComputingProviderPath computes a request path to the uploadRes action of ComputingProvider.
func UploadResComputingProviderPath(resHash string, aesHash string, eTHKey string, requestID int) string {
	param0 := resHash
	param1 := aesHash
	param2 := eTHKey
	param3 := strconv.Itoa(requestID)

	return fmt.Sprintf("/computing/upload/%s/%s/%s/%s", param0, param1, param2, param3)
}

// upload result hash for [request_id]
func (c *Client) UploadResComputingProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUploadResComputingProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUploadResComputingProviderRequest create the request corresponding to the uploadRes action endpoint of the ComputingProvider resource.
func (c *Client) NewUploadResComputingProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
